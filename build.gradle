apply plugin: 'cpp'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

repositories {
	maven {
		url 'https://github.com/Boukefalos/jlibloader/raw/mvn-repo/'
	}
	mavenCentral()
}

dependencies {
	compile 'java3d:j3d-core:1.3.1'
	compile 'com.github.boukefalos:jlibloader:0.2'
}

group = 'com.github.boukefalos'
project.archivesBaseName = 'jlibxinput'
version = '1.0'

task wrapper(type: Wrapper) {
	gradleVersion = '1.12'
}

model {
    platforms {
		windows_i386 {
			architecture 'i386'
			operatingSystem 'windows'
		}
        windows_amd64 {
            architecture 'amd64'
            operatingSystem 'windows'
        }
    }
    toolChains {
        visualCpp(VisualCpp)
    }
	repositories {
		libs(PrebuiltLibraries) {
			dxguid {
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file("lib/${targetPlatform.name}/dxguid.lib")
				}
			}
			dinput8 {
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file("lib/${targetPlatform.name}/dinput8.lib")
				}
			}
			user32 {
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file("lib/${targetPlatform.name}/user32.lib")
				}
			}
		}
	}
}

def jniHeadersDir = file("$buildDir/headers")

task jniHeaders(dependsOn: compileJava) {
	def outputFile = file("$jniHeadersDir/de_hardcode_jxinput_directinput_DirectInputDriver.h")
	inputs.files sourceSets.main.output
	outputs.file outputFile
	exec {
		executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
		args '-o', outputFile
		args '-classpath', sourceSets.main.output.classesDir
		args '-classpath', file("$buildDir/../bin")
		args 'de.hardcode.jxinput.directinput.DirectInputDriver'
	}
}

libraries {
    main {
        baseName project.archivesBaseName
    }
	all {
        binaries.withType(SharedLibraryBinary) { binary ->
			cppCompiler.define 'JXINPUT_EXPORTS'	
			cppCompiler.args '-I' + jniHeadersDir
			if (targetPlatform.operatingSystem.macOsX) {
                cppCompiler.args '-I', "/System/Library/Frameworks/JavaVM.framework/Headers"
                linker.args '-framework', "JavaVM"
            } else if (targetPlatform.operatingSystem.linux) {
                cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                cppCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
            } else if (targetPlatform.operatingSystem.windows) {
                cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
            }
			tasks.withType(CppCompile) { task ->
				task.dependsOn jniHeaders
			}
			lib library: 'dxguid', linkage: 'static'
			lib library: 'dinput8', linkage: 'static'
			lib library: 'user32', linkage: 'static'
        }
    }
}

tasks.withType(Upload) {
	repositories {
		mavenDeployer {
			repository(url: uri('.maven'))
		}
	}
}

configurations {
	jni
}

def deployer = uploadJni.repositories.mavenDeployer

binaries.withType(SharedLibraryBinary) { binary ->
	if (!buildable) {
		return
	}
	def variantName = "${targetPlatform.operatingSystem.name}-${targetPlatform.architecture.name}"
	def taskName = "jar-${variantName}"
	def nativeJar = project.tasks.findByName(taskName)
	if (nativeJar == null) {
		nativeJar = project.task(taskName, type: Jar) {
			baseName = "${project.archivesBaseName}-$variantName"
		}
		artifacts {
			jni nativeJar
		}
		def jniPom = deployer.addFilter(variantName) { artifact, file ->
			return file == nativeJar.archivePath
		}
		jniPom.groupId = project.group
		jniPom.artifactId = nativeJar.baseName
		jniPom.version = project.version
		jniPom.scopeMappings.mappings.clear()
	}
	def builderTask = binary.tasks.builder
	def libraryDirectory = project.group.replace('.', '/') + "/${project.archivesBaseName}/${variantName}"
	nativeJar.into(libraryDirectory) { from builderTask.outputFile }
	nativeJar.dependsOn builderTask
}

def mainPom = uploadArchives.repositories.mavenDeployer.pom
mainPom.groupId = project.group
mainPom.artifactId = jar.baseName
mainPom.version = project.version
mainPom.scopeMappings.mappings.clear()
mainPom.withXml { provider ->
	def node = provider.asNode()
	def deps = node.appendNode('dependencies')
	['windows-amd64', 'windows-i386'].each { platform ->
		def dep = deps.appendNode('dependency')
		dep.appendNode('groupId', project.group)
		dep.appendNode('artifactId', "${project.archivesBaseName}-${platform}")
		dep.appendNode('version', project.version)
	}
	def dep = deps.appendNode('dependency')
	dep.appendNode('groupId', 'com.github.boukefalos')
	dep.appendNode('artifactId', 'jlibloader')
	dep.appendNode('version', '0.2')
}

jar {
	from sourceSets.main.allSource
}